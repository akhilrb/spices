{"version":3,"file":"static/js/738.cbe250b6.chunk.js","mappings":"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","sources":["components/admin/AdminLayout.jsx","pages/admin/Orders.jsx","utils/currency.js"],"sourcesContent":["import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst AdminLayout = ({ children }) => {\n  const location = useLocation();\n\n  const navItems = [\n    {\n      path: '/admin',\n      name: 'Dashboard',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" />\n        </svg>\n      )\n    },\n    {\n      path: '/admin/orders',\n      name: 'Orders',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z\" />\n        </svg>\n      )\n    },\n    {\n      path: '/admin/products',\n      name: 'Products',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\n        </svg>\n      )\n    },\n    {\n      path: '/admin/users',\n      name: 'Users',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z\" />\n        </svg>\n      )\n    },\n    {\n      path: '/admin/sales-dashboard',\n      name: 'Sales Dashboard',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 11V7a4 4 0 118 0v4m-1 4h-6m6 0a2 2 0 11-4 0m4 0a2 2 0 11-4 0m-4 0H5m6 0a2 2 0 11-4 0m4 0a2 2 0 11-4 0\" />\n        </svg>\n      )\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 flex\">\n      {/* Sidebar */}\n      <div className=\"w-64 bg-white shadow-lg\">\n        <div className=\"h-16 bg-green-700 flex items-center px-6\">\n          <span className=\"text-white text-lg font-semibold\">Admin Panel</span>\n        </div>\n        <nav className=\"mt-6\">\n          {navItems.map((item) => (\n            <Link\n              key={item.path}\n              to={item.path}\n              className={`flex items-center px-6 py-3 text-gray-700 hover:bg-gray-100 ${\n                location.pathname === item.path ? 'bg-gray-100 border-r-4 border-green-700' : ''\n              }`}\n            >\n              {item.icon}\n              <span className=\"mx-3\">{item.name}</span>\n            </Link>\n          ))}\n          <Link\n            to=\"/\"\n            className=\"flex items-center px-6 py-3 text-gray-700 hover:bg-gray-100 mt-4\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\n            </svg>\n            <span className=\"mx-3\">Back to Site</span>\n          </Link>\n        </nav>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1\">\n        {/* Top Navigation */}\n        <div className=\"bg-white shadow-sm h-16 flex items-center px-8\">\n          <div className=\"flex-1\"></div>\n          <div className=\"flex items-center space-x-4\">\n            <span className=\"text-gray-700\">Admin</span>\n          </div>\n        </div>\n\n        {/* Page Content */}\n        <div className=\"p-8\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminLayout; ","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { supabase } from '../../config/supabase';\nimport { formatPrice } from '../../utils/currency';\nimport toast from 'react-hot-toast';\nimport AdminLayout from '../../components/admin/AdminLayout';\n\nconst AdminOrders = () => {\n  const [orders, setOrders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [filters, setFilters] = useState({\n    status: '',\n    dateRange: 'all',\n    startDate: '',\n    endDate: '',\n    search: ''\n  });\n  const [sorting, setSorting] = useState({\n    field: 'created_at',\n    direction: 'desc'\n  });\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(10);\n  const [expandedOrder, setExpandedOrder] = useState(null);\n\n  useEffect(() => {\n    fetchOrders();\n  }, [filters, sorting, currentPage, itemsPerPage]);\n\n  const fetchOrders = async () => {\n    try {\n      setLoading(true);\n      let query = supabase\n        .from('orders')\n        .select(`\n          *,\n          order_items (\n            quantity,\n            price,\n            products (\n              name,\n              image_url\n            )\n          )\n        `)\n        .range((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage - 1);\n\n      // Apply filters\n      if (filters.status) {\n        query = query.eq('status', filters.status);\n      }\n\n      // Date filtering\n      if (filters.dateRange === 'custom' && filters.startDate && filters.endDate) {\n        const endDate = new Date(filters.endDate);\n        endDate.setDate(endDate.getDate() + 1);\n        query = query\n          .gte('created_at', new Date(filters.startDate).toISOString())\n          .lt('created_at', endDate.toISOString());\n      } else if (filters.dateRange !== 'all') {\n        const now = new Date();\n        let startDate;\n        switch (filters.dateRange) {\n          case 'today':\n            startDate = new Date(now.setHours(0, 0, 0, 0));\n            break;\n          case 'week':\n            startDate = new Date(now.setDate(now.getDate() - 7));\n            break;\n          case 'month':\n            startDate = new Date(now.setMonth(now.getMonth() - 1));\n            break;\n          default:\n            break;\n        }\n        if (startDate) {\n          query = query.gte('created_at', startDate.toISOString());\n        }\n      }\n\n      if (filters.search) {\n        query = query.or(`\n          shipping_address.ilike.%${filters.search}%,\n          city.ilike.%${filters.search}%,\n          mobile.ilike.%${filters.search}%,\n          id.ilike.%${filters.search}%\n        `);\n      }\n\n      // Apply sorting\n      query = query.order(sorting.field, { ascending: sorting.direction === 'asc' });\n\n      const { data, error } = await query;\n\n      if (error) {\n        console.error('Detailed Error:', error);\n        throw error;\n      }\n\n      // Transform data to ensure consistent structure\n      const processedOrders = data.map((order, index) => ({\n        ...order,\n        serialNo: (currentPage - 1) * itemsPerPage + index + 1,\n        order_items: order.order_items.map(item => ({\n          ...item,\n          products: item.products // Ensure products are directly accessible\n        }))\n      }));\n\n      setOrders(processedOrders);\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n      toast.error('Failed to load orders');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateOrderStatus = async (orderId, newStatus, cancelReason = null) => {\n    try {\n      // First, fetch the current order details with its items\n      const { data: orderDetails, error: orderFetchError } = await supabase\n        .from('orders')\n        .select(`\n          *,\n          order_items (\n            product_id,\n            quantity,\n            products (name)\n          )\n        `)\n        .eq('id', orderId)\n        .single();\n\n      if (orderFetchError) {\n        console.error('Error fetching order details:', orderFetchError);\n        toast.error('Failed to update order status');\n        return;\n      }\n\n      console.log('Order Details for Stock Management:', {\n        orderId,\n        currentStatus: orderDetails.status,\n        newStatus,\n        orderItems: orderDetails.order_items\n      });\n\n      // Determine stock adjustment based on order status\n      const stockAdjustments = [];\n      \n      // If order is being cancelled (by admin or user)\n      if (newStatus === 'cancelled' && \n          ['pending', 'processing'].includes(orderDetails.status)) {\n        // Restore stock for each product in the order\n        for (const item of orderDetails.order_items) {\n          console.log(`Attempting to increment stock for product ${item.product_id}, quantity: ${item.quantity}`);\n          \n          stockAdjustments.push(\n            supabase.rpc('increment_product_stock', { \n              product_id: item.product_id, \n              quantity_to_add: item.quantity \n            }).then(result => ({\n              productId: item.product_id,\n              productName: item.products?.name || 'Unknown Product',\n              quantity: item.quantity,\n              result,\n              error: null\n            })).catch(error => ({\n              productId: item.product_id,\n              productName: item.products?.name || 'Unknown Product',\n              quantity: item.quantity,\n              result: null,\n              error\n            }))\n          );\n        }\n      }\n      \n      // If order is being processed from a non-processed state\n      if (newStatus === 'processing' && orderDetails.status !== 'processing') {\n        // Reduce stock for each product in the order\n        for (const item of orderDetails.order_items) {\n          console.log(`Attempting to decrement stock for product ${item.product_id}, quantity: ${item.quantity}`);\n          \n          stockAdjustments.push(\n            supabase.rpc('decrement_product_stock', { \n              product_id: item.product_id, \n              quantity_to_subtract: item.quantity \n            }).then(result => ({\n              productId: item.product_id,\n              productName: item.products?.name || 'Unknown Product',\n              quantity: item.quantity,\n              result,\n              error: null\n            })).catch(error => ({\n              productId: item.product_id,\n              productName: item.products?.name || 'Unknown Product',\n              quantity: item.quantity,\n              result: null,\n              error\n            }))\n          );\n        }\n      }\n\n      // Wait for all stock adjustments\n      if (stockAdjustments.length > 0) {\n        const stockResults = await Promise.all(stockAdjustments);\n        \n        // Log detailed stock adjustment results\n        console.log('Stock Adjustment Results:', stockResults);\n\n        const stockErrors = stockResults.filter(result => result.error);\n        \n        if (stockErrors.length > 0) {\n          console.error('Stock adjustment errors:', stockErrors);\n          \n          // Detailed error logging\n          stockErrors.forEach(error => {\n            toast.error(`Failed to update stock for ${error.productName}`);\n          });\n\n          return;\n        }\n      }\n\n      // Update order status\n      const { error: statusUpdateError } = await supabase\n        .from('orders')\n        .update({ \n          status: newStatus, \n          cancel_reason: newStatus === 'cancelled' ? (cancelReason || 'Cancelled by admin') : null,\n          cancelled_at: newStatus === 'cancelled' ? new Date().toISOString() : null\n        })\n        .eq('id', orderId);\n\n      if (statusUpdateError) {\n        console.error('Error updating order status:', statusUpdateError);\n        toast.error('Failed to update order status');\n        return;\n      }\n\n      // Refresh orders after update\n      await fetchOrders();\n      \n      // Show success toast\n      toast.success(`Order ${newStatus} successfully`);\n    } catch (error) {\n      console.error('Comprehensive order status update error:', error);\n      toast.error('An unexpected error occurred');\n    }\n  };\n\n  const handleSort = (field) => {\n    setSorting(prev => ({\n      field,\n      direction: prev.field === field && prev.direction === 'asc' ? 'desc' : 'asc'\n    }));\n  };\n\n  const handleItemsPerPageChange = (event) => {\n    setItemsPerPage(parseInt(event.target.value, 10));\n    setCurrentPage(1); // Reset to first page on items per page change\n  };\n\n  const toggleOrderExpand = (orderId) => {\n    setExpandedOrder(expandedOrder === orderId ? null : orderId);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-100 p-6\">\n        <div className=\"flex justify-center items-center h-full\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-green-700\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const totalPages = Math.ceil(orders.length / itemsPerPage);\n\n  return (\n    <AdminLayout>\n      <div className=\"min-h-screen bg-gray-100\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Manage Orders</h1>\n              <p className=\"mt-1 text-sm text-gray-500\">\n                View and manage all customer orders\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n              <span className=\"px-3 py-1 bg-gray-100 rounded-full\">\n                Total Orders: {orders.length}\n              </span>\n              <span className=\"px-3 py-1 bg-yellow-100 text-yellow-800 rounded-full\">\n                Pending: {orders.filter(order => order.status === 'pending').length}\n              </span>\n              <span className=\"px-3 py-1 bg-green-100 text-green-800 rounded-full\">\n                Delivered: {orders.filter(order => order.status === 'delivered').length}\n              </span>\n            </div>\n          </div>\n\n          {/* Filters */}\n          <div className=\"bg-white rounded-lg shadow p-6 mb-8\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Status\n                </label>\n                <select\n                  value={filters.status}\n                  onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}\n                  className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500\"\n                >\n                  <option value=\"\">All Status</option>\n                  <option value=\"pending\">Pending</option>\n                  <option value=\"processing\">Processing</option>\n                  <option value=\"shipped\">Shipped</option>\n                  <option value=\"delivered\">Delivered</option>\n                  <option value=\"cancelled\">Cancelled</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Date Range\n                </label>\n                <select\n                  value={filters.dateRange}\n                  onChange={(e) => {\n                    setFilters(prev => ({\n                      ...prev,\n                      dateRange: e.target.value,\n                      // Reset custom dates when changing range type\n                      startDate: e.target.value === 'custom' ? prev.startDate : '',\n                      endDate: e.target.value === 'custom' ? prev.endDate : ''\n                    }))\n                  }}\n                  className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500\"\n                >\n                  <option value=\"all\">All Time</option>\n                  <option value=\"today\">Today</option>\n                  <option value=\"week\">Last 7 Days</option>\n                  <option value=\"month\">Last 30 Days</option>\n                  <option value=\"custom\">Custom Range</option>\n                </select>\n              </div>\n\n              {filters.dateRange === 'custom' && (\n                <div className=\"md:col-span-2 grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Start Date\n                    </label>\n                    <input\n                      type=\"date\"\n                      value={filters.startDate}\n                      onChange={(e) => setFilters(prev => ({\n                        ...prev,\n                        startDate: e.target.value\n                      }))}\n                      max={filters.endDate || undefined}\n                      className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      End Date\n                    </label>\n                    <input\n                      type=\"date\"\n                      value={filters.endDate}\n                      onChange={(e) => setFilters(prev => ({\n                        ...prev,\n                        endDate: e.target.value\n                      }))}\n                      min={filters.startDate || undefined}\n                      max={new Date().toISOString().split('T')[0]}\n                      className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500\"\n                    />\n                  </div>\n                </div>\n              )}\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Search\n                </label>\n                <input\n                  type=\"text\"\n                  value={filters.search}\n                  onChange={(e) => setFilters(prev => ({ ...prev, search: e.target.value }))}\n                  placeholder=\"Search orders...\"\n                  className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Rows per page\n                </label>\n                <select\n                  value={itemsPerPage}\n                  onChange={handleItemsPerPageChange}\n                  className=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md\"\n                >\n                  <option value={5}>5</option>\n                  <option value={10}>10</option>\n                  <option value={20}>20</option>\n                  <option value={50}>50</option>\n                </select>\n              </div>\n\n              <div className=\"flex items-end\">\n                <button\n                  onClick={() => setFilters({\n                    status: '',\n                    dateRange: 'all',\n                    startDate: '',\n                    endDate: '',\n                    search: ''\n                  })}\n                  className=\"bg-gray-100 text-gray-700 px-4 py-2 rounded hover:bg-gray-200\"\n                >\n                  Clear Filters\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Orders Table */}\n          <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th \n                      className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer\"\n                      onClick={() => handleSort('serialNo')}\n                    >\n                      SL No\n                      {sorting.field === 'serialNo' && (\n                        <span className=\"ml-1\">{sorting.direction === 'asc' ? '↑' : '↓'}</span>\n                      )}\n                    </th>\n                    <th \n                      className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer\"\n                      onClick={() => handleSort('id')}\n                    >\n                      Order ID\n                      {sorting.field === 'id' && (\n                        <span className=\"ml-1\">{sorting.direction === 'asc' ? '↑' : '↓'}</span>\n                      )}\n                    </th>\n                    <th \n                      className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer\"\n                      onClick={() => handleSort('created_at')}\n                    >\n                      Date\n                      {sorting.field === 'created_at' && (\n                        <span className=\"ml-1\">{sorting.direction === 'asc' ? '↑' : '↓'}</span>\n                      )}\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Customer Details\n                    </th>\n                    <th \n                      className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer\"\n                      onClick={() => handleSort('total_amount')}\n                    >\n                      Amount\n                      {sorting.field === 'total_amount' && (\n                        <span className=\"ml-1\">{sorting.direction === 'asc' ? '↑' : '↓'}</span>\n                      )}\n                    </th>\n                    <th \n                      className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer\"\n                      onClick={() => handleSort('status')}\n                    >\n                      Status\n                      {sorting.field === 'status' && (\n                        <span className=\"ml-1\">{sorting.direction === 'asc' ? '↑' : '↓'}</span>\n                      )}\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Cancellation Reason\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Actions\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {orders.map((order) => (\n                    <React.Fragment key={order.id}>\n                      <tr className=\"hover:bg-gray-50 cursor-pointer\" onClick={() => toggleOrderExpand(order.id)}>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {order.serialNo}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                          #{order.id.slice(0, 8)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {new Date(order.created_at).toLocaleDateString('en-IN', {\n                            year: 'numeric',\n                            month: 'long',\n                            day: 'numeric',\n                            hour: '2-digit',\n                            minute: '2-digit'\n                          })}\n                        </td>\n                        <td className=\"px-6 py-4 text-sm text-gray-500\">\n                          <p>{order.shipping_address}</p>\n                          <p>{order.city} - {order.pincode}</p>\n                          <p>Mobile: {order.mobile}</p>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {formatPrice(order.total_amount)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full\n                            ${order.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : ''}\n                            ${order.status === 'processing' ? 'bg-blue-100 text-blue-800' : ''}\n                            ${order.status === 'shipped' ? 'bg-green-100 text-green-800' : ''}\n                            ${order.status === 'delivered' ? 'bg-green-100 text-green-800' : ''}\n                            ${order.status === 'cancelled' ? 'bg-red-100 text-red-800' : ''}\n                          `}>\n                            {order.status ? order.status.charAt(0).toUpperCase() + order.status.slice(1) : ''}\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {order.cancel_reason ? order.cancel_reason : 'N/A'}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                          <select\n                            className=\"text-sm border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500\"\n                            value={order.status}\n                            onChange={(e) => updateOrderStatus(order.id, e.target.value)}\n                          >\n                            <option value=\"pending\">Pending</option>\n                            <option value=\"processing\">Processing</option>\n                            <option value=\"shipped\">Shipped</option>\n                            <option value=\"delivered\">Delivered</option>\n                            <option value=\"cancelled\">Cancelled</option>\n                          </select>\n                        </td>\n                      </tr>\n                      {expandedOrder === order.id && (\n                        <tr>\n                          <td colSpan=\"8\" className=\"px-6 py-4 bg-gray-50\">\n                            <div className=\"rounded-lg\">\n                              <div className=\"flex justify-between items-center mb-2\">\n                                <h3 className=\"text-sm font-semibold text-gray-900\">Order Items</h3>\n                                <span className=\"text-sm text-gray-500\">\n                                  Total Items: {order.order_items.length}\n                                </span>\n                              </div>\n                              <div className=\"space-y-2\">\n                                {order.order_items.map((item, index) => (\n                                  <div \n                                    key={index} \n                                    className=\"flex justify-between items-center p-3 bg-white rounded-lg shadow-sm\"\n                                  >\n                                    <div className=\"flex items-center space-x-4\">\n                                      {item.products.image_url && (\n                                        <img \n                                          src={item.products.image_url} \n                                          alt={item.products.name}\n                                          className=\"w-12 h-12 object-cover rounded\"\n                                        />\n                                      )}\n                                      <div>\n                                        <p className=\"text-sm font-medium text-gray-900\">\n                                          {item.products.name}\n                                        </p>\n                                        <p className=\"text-sm text-gray-500\">\n                                          Quantity: {item.quantity}\n                                        </p>\n                                      </div>\n                                    </div>\n                                    <div className=\"text-sm font-medium text-gray-900\">\n                                      {formatPrice(item.price)}\n                                    </div>\n                                  </div>\n                                ))}\n                              </div>\n                              <div className=\"mt-3 text-right\">\n                                <p className=\"text-sm font-medium text-gray-900\">\n                                  Subtotal: {formatPrice(order.total_amount)}\n                                </p>\n                              </div>\n                            </div>\n                          </td>\n                        </tr>\n                      )}\n                    </React.Fragment>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          {/* Pagination Controls at the Bottom */}\n          <div className=\"flex justify-between items-center mt-4\">\n            <button\n              onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n              disabled={currentPage === 1}\n              className=\"px-4 py-2 bg-gray-200 rounded-md disabled:opacity-50\"\n            >\n              Previous\n            </button>\n            <span className=\"text-sm text-gray-700\">\n              Page {currentPage} of {totalPages}\n            </span>\n            <button\n              onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n              disabled={currentPage === totalPages}\n              className=\"px-4 py-2 bg-gray-200 rounded-md disabled:opacity-50\"\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      </div>\n    </AdminLayout>\n  );\n};\n\nexport default AdminOrders;","export const formatPrice = (price) => {\n  // Format with Indian numbering system and Rupee symbol\n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency: 'INR',\n    maximumFractionDigits: 0,\n  }).format(price);\n}; "],"names":["_ref","children","location","useLocation","navItems","path","name","icon","_jsx","className","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","_jsxs","map","item","Link","to","concat","pathname","AdminOrders","orders","setOrders","useState","loading","setLoading","filters","setFilters","status","dateRange","startDate","endDate","search","sorting","setSorting","field","direction","currentPage","setCurrentPage","itemsPerPage","setItemsPerPage","expandedOrder","setExpandedOrder","useEffect","fetchOrders","async","query","supabase","from","select","range","eq","Date","setDate","getDate","gte","toISOString","lt","now","setHours","setMonth","getMonth","or","order","ascending","data","error","console","processedOrders","index","_objectSpread","serialNo","order_items","products","toast","handleSort","prev","totalPages","Math","ceil","length","AdminLayout","filter","value","onChange","e","target","type","max","undefined","min","split","placeholder","event","parseInt","onClick","React","toggleOrderExpand","orderId","id","slice","created_at","toLocaleDateString","year","month","day","hour","minute","shipping_address","city","pincode","mobile","formatPrice","total_amount","charAt","toUpperCase","cancel_reason","newStatus","cancelReason","arguments","orderDetails","orderFetchError","single","log","currentStatus","orderItems","stockAdjustments","includes","product_id","quantity","push","rpc","quantity_to_add","then","result","_item$products","productId","productName","catch","_item$products2","quantity_to_subtract","_item$products3","_item$products4","stockResults","Promise","all","stockErrors","forEach","statusUpdateError","update","cancelled_at","success","updateOrderStatus","colSpan","image_url","src","alt","price","disabled","Intl","NumberFormat","style","currency","maximumFractionDigits","format"],"sourceRoot":""}