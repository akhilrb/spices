{"version":3,"file":"static/js/98.80cf39a0.chunk.js","mappings":"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","sources":["pages/Orders.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { supabase } from '../config/supabase';\nimport Navbar from '../components/Navbar';\nimport toast from 'react-hot-toast';\n\n// Utility function for INR formatting\nconst formatInrPrice = (amount) => {\n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency: 'INR',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(amount);\n};\n\nconst Orders = () => {\n  const { user } = useAuth();\n  const [orders, setOrders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [cancellingOrder, setCancellingOrder] = useState(null);\n  const [showCancelModal, setShowCancelModal] = useState(false);\n  const [selectedOrder, setSelectedOrder] = useState(null);\n  const [cancelReason, setCancelReason] = useState('');\n  const [expandedOrderId, setExpandedOrderId] = useState(null);\n\n  // Pagination and Filtering States\n  const [pagination, setPagination] = useState({\n    currentPage: 1,\n    itemsPerPage: 5,\n    totalItems: 0\n  });\n\n  // Items per page options\n  const itemsPerPageOptions = [5, 10, 20, 50];\n\n  const [filters, setFilters] = useState({\n    status: '',\n    dateRange: {\n      from: null,\n      to: null\n    }\n  });\n\n  const [sorting, setSorting] = useState({\n    field: 'created_at',\n    direction: 'desc'\n  });\n\n  useEffect(() => {\n    if (user) {\n      fetchOrders();\n    }\n  }, [\n    user, \n    pagination.currentPage, \n    pagination.itemsPerPage, \n    filters.status, \n    filters.dateRange,\n    sorting\n  ]);\n\n  const fetchOrders = async () => {\n    try {\n      setLoading(true);\n      \n      // Calculate pagination range\n      const start = (pagination.currentPage - 1) * pagination.itemsPerPage;\n      const end = start + pagination.itemsPerPage - 1;\n\n      // Base query\n      let query = supabase\n        .from('orders')\n        .select(`\n          id,\n          status,\n          total_amount,\n          shipping_address,\n          city,\n          pincode,\n          mobile,\n          created_at,\n          cancel_reason,\n          cancelled_at,\n          order_items (\n            quantity,\n            price,\n            products (\n              name,\n              image_url\n            )\n          )\n        `, { count: 'exact' })\n        .eq('user_id', user.id)\n        .order(sorting.field, { ascending: sorting.direction === 'asc' });\n\n      // Apply status filter\n      if (filters.status) {\n        query = query.eq('status', filters.status);\n      }\n\n      // Apply date range filter\n      if (filters.dateRange.from) {\n        query = query.gte('created_at', filters.dateRange.from);\n      }\n      if (filters.dateRange.to) {\n        query = query.lte('created_at', filters.dateRange.to);\n      }\n\n      // Apply pagination\n      const { data: ordersData, error, count } = await query.range(start, end);\n\n      if (error) throw error;\n\n      // Add serial number to orders\n      const ordersWithSerialNo = ordersData.map((order, index) => ({\n        ...order,\n        serialNo: start + index + 1\n      }));\n\n      setOrders(ordersWithSerialNo);\n      setPagination(prev => ({\n        ...prev,\n        totalItems: count || 0\n      }));\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n      toast.error('Failed to load orders');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleOrderExpand = (orderId) => {\n    setExpandedOrderId(prev => prev === orderId ? null : orderId);\n  };\n\n  const getOrderStatus = (status) => {\n    const statusColors = {\n      pending: 'bg-yellow-100 text-yellow-800',\n      processing: 'bg-blue-100 text-blue-800',\n      completed: 'bg-green-100 text-green-800',\n      cancelled: 'bg-red-100 text-red-800'\n    };\n    return `px-2 py-1 rounded-full text-xs font-medium ${statusColors[status] || 'bg-gray-100 text-gray-800'}`;\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const openCancelModal = (order) => {\n    setSelectedOrder(order);\n    setShowCancelModal(true);\n  };\n\n  const handleCancelOrder = async () => {\n    if (!selectedOrder) return;\n\n    try {\n      setCancellingOrder(selectedOrder.id);\n\n      // Fetch order details to validate cancellation\n      const { data: orderDetails, error: orderFetchError } = await supabase\n        .from('orders')\n        .select(`\n          *,\n          order_items (\n            product_id,\n            quantity,\n            products (name)\n          )\n        `)\n        .eq('id', selectedOrder.id)\n        .single();\n\n      if (orderFetchError) {\n        console.error('Error fetching order details:', orderFetchError);\n        toast.error('Failed to cancel order');\n        return;\n      }\n\n      // Validate order status for cancellation\n      if (!['pending', 'processing'].includes(orderDetails.status)) {\n        toast.error('This order cannot be cancelled');\n        return;\n      }\n\n      // Prepare stock restoration\n      const stockRestorePromises = orderDetails.order_items.map(item => \n        supabase.rpc('increment_product_stock', {\n          product_id: item.product_id,\n          quantity_to_add: item.quantity\n        })\n      );\n\n      // Restore stock\n      await Promise.all(stockRestorePromises);\n\n      // Update order status\n      const { error: updateError } = await supabase\n        .from('orders')\n        .update({ \n          status: 'cancelled', \n          cancel_reason: cancelReason || 'Cancelled by customer',\n          cancelled_at: new Date().toISOString()\n        })\n        .eq('id', selectedOrder.id);\n\n      if (updateError) throw updateError;\n\n      // Refresh orders and close modal\n      await fetchOrders();\n      setShowCancelModal(false);\n      setCancelReason('');\n      toast.success('Order cancelled successfully');\n    } catch (error) {\n      console.error('Order cancellation error:', error);\n      toast.error('Failed to cancel order');\n    } finally {\n      setCancellingOrder(null);\n    }\n  };\n\n  const handleSort = (field) => {\n    setSorting(prev => ({\n      field,\n      direction: prev.field === field && prev.direction === 'desc' ? 'asc' : 'desc'\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      <div className=\"max-w-7xl mx-auto px-4 py-16\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">My Orders</h1>\n          \n          {/* Filters and Sorting */}\n          <div className=\"flex space-x-4 items-center\">\n            {/* Items per Page Selector */}\n            <div className=\"flex items-center space-x-2\">\n              <label htmlFor=\"itemsPerPage\" className=\"text-sm text-gray-700\">\n                Items per page:\n              </label>\n              <select\n                id=\"itemsPerPage\"\n                value={pagination.itemsPerPage}\n                onChange={(e) => setPagination(prev => ({\n                  ...prev, \n                  itemsPerPage: parseInt(e.target.value),\n                  currentPage: 1 // Reset to first page when changing items per page\n                }))}\n                className=\"px-3 py-2 border rounded-md text-sm\"\n              >\n                {itemsPerPageOptions.map(option => (\n                  <option key={option} value={option}>\n                    {option}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            {/* Status Filter */}\n            <select\n              value={filters.status}\n              onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}\n              className=\"px-3 py-2 border rounded-md\"\n            >\n              <option value=\"\">All Statuses</option>\n              <option value=\"pending\">Pending</option>\n              <option value=\"processing\">Processing</option>\n              <option value=\"completed\">Completed</option>\n              <option value=\"cancelled\">Cancelled</option>\n            </select>\n\n            {/* Date Range Filters */}\n            <div className=\"flex space-x-2\">\n              <input\n                type=\"date\"\n                value={filters.dateRange.from || ''}\n                onChange={(e) => setFilters(prev => ({ \n                  ...prev, \n                  dateRange: { ...prev.dateRange, from: e.target.value }\n                }))}\n                className=\"px-3 py-2 border rounded-md\"\n              />\n              <input\n                type=\"date\"\n                value={filters.dateRange.to || ''}\n                onChange={(e) => setFilters(prev => ({ \n                  ...prev, \n                  dateRange: { ...prev.dateRange, to: e.target.value }\n                }))}\n                className=\"px-3 py-2 border rounded-md\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {loading ? (\n          <div className=\"text-center py-12\">\n            <p>Loading orders...</p>\n          </div>\n        ) : orders.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No orders found</h3>\n            <p className=\"text-gray-500\">\n              {filters.status || filters.dateRange.from || filters.dateRange.to \n                ? 'No orders match your current filters.' \n                : 'You haven\\'t placed any orders yet.'}\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {orders.map((order) => (\n              <div \n                key={order.id} \n                className=\"bg-white shadow rounded-lg overflow-hidden\"\n              >\n                {/* Order Summary Row */}\n                <div \n                  className=\"p-4 flex items-center justify-between cursor-pointer hover:bg-gray-50\"\n                  onClick={() => toggleOrderExpand(order.id)}\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    <span className=\"text-sm font-medium text-gray-500\">\n                      SL No: {order.serialNo}\n                    </span>\n                    <span className=\"font-medium text-gray-900\">\n                      Order #{order.id.slice(0, 8)}\n                    </span>\n                    <span className={getOrderStatus(order.status)}>\n                      {order.status}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-4\">\n                    <span className=\"text-sm text-gray-500\">\n                      {formatDate(order.created_at)}\n                    </span>\n                    <span className=\"font-bold text-gray-900\">\n                      {formatInrPrice(order.total_amount)}\n                    </span>\n                    <svg \n                      className={`w-5 h-5 transform transition-transform duration-200 ${\n                        expandedOrderId === order.id ? 'rotate-180' : ''\n                      }`}\n                      fill=\"none\" \n                      stroke=\"currentColor\" \n                      viewBox=\"0 0 24 24\" \n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <path \n                        strokeLinecap=\"round\" \n                        strokeLinejoin=\"round\" \n                        strokeWidth={2} \n                        d=\"M19 9l-7 7-7-7\" \n                      />\n                    </svg>\n                  </div>\n                </div>\n\n                {/* Expandable Order Details */}\n                {expandedOrderId === order.id && (\n                  <div className=\"p-4 border-t\">\n                    {/* Order Items */}\n                    <div className=\"mb-4\">\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <h4 className=\"text-lg font-semibold\">Order Items</h4>\n                        {order.status === 'pending' && (\n                          <button\n                            onClick={() => openCancelModal(order)}\n                            disabled={cancellingOrder === order.id}\n                            className=\"px-3 py-1 bg-red-500 text-white rounded-md hover:bg-red-600 disabled:opacity-50 text-sm\"\n                          >\n                            {cancellingOrder === order.id ? 'Cancelling...' : 'Cancel Order'}\n                          </button>\n                        )}\n                      </div>\n                      <div className=\"space-y-2\">\n                        {order.order_items.map((item, index) => (\n                          <div \n                            key={index} \n                            className=\"flex items-center justify-between border-b pb-2 last:border-b-0\"\n                          >\n                            <div className=\"flex items-center space-x-4\">\n                              <img \n                                src={item.products.image_url} \n                                alt={item.products.name} \n                                className=\"w-16 h-16 object-cover rounded\"\n                              />\n                              <div>\n                                <p className=\"font-medium\">{item.products.name}</p>\n                                <p className=\"text-sm text-gray-500\">\n                                  Quantity: {item.quantity}\n                                </p>\n                              </div>\n                            </div>\n                            <span className=\"font-medium\">\n                              {formatInrPrice(item.price * item.quantity)}\n                            </span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Shipping Details */}\n                    <div className=\"bg-gray-50 p-4 rounded\">\n                      <h4 className=\"text-lg font-semibold mb-2\">Shipping Details</h4>\n                      <p>{order.shipping_address}</p>\n                      <p>{order.city} - {order.pincode}</p>\n                      <p>Mobile: {order.mobile}</p>\n                    </div>\n\n                    {/* Cancellation Details (if applicable) */}\n                    {order.status === 'cancelled' && order.cancel_reason && (\n                      <div className=\"mt-4 bg-red-50 p-4 rounded\">\n                        <h4 className=\"text-lg font-semibold text-red-800 mb-2\">\n                          Cancellation Details\n                        </h4>\n                        <p className=\"text-red-700\">\n                          Reason: {order.cancel_reason}\n                        </p>\n                        {order.cancelled_at && (\n                          <p className=\"text-red-700 text-sm\">\n                            Cancelled on: {formatDate(order.cancelled_at)}\n                          </p>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Pagination Controls */}\n        <div className=\"flex justify-between items-center mt-6\">\n          <div className=\"text-sm text-gray-700\">\n            Showing{' '}\n            <span className=\"font-medium\">\n              {(pagination.currentPage - 1) * pagination.itemsPerPage + 1}\n            </span>{' '}\n            to{' '}\n            <span className=\"font-medium\">\n              {Math.min(\n                pagination.currentPage * pagination.itemsPerPage, \n                pagination.totalItems\n              )}\n            </span>{' '}\n            of{' '}\n            <span className=\"font-medium\">{pagination.totalItems}</span>{' '}\n            orders\n          </div>\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage - 1 }))}\n              disabled={pagination.currentPage === 1}\n              className=\"px-4 py-2 bg-green-600 text-white rounded disabled:opacity-50\"\n            >\n              Previous\n            </button>\n            <button\n              onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage + 1 }))}\n              disabled={pagination.currentPage >= Math.ceil(pagination.totalItems / pagination.itemsPerPage)}\n              className=\"px-4 py-2 bg-green-600 text-white rounded disabled:opacity-50\"\n            >\n              Next\n            </button>\n          </div>\n        </div>\n\n        {/* Cancel Order Modal */}\n        {showCancelModal && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n            <div className=\"bg-white rounded-lg p-6 max-w-md w-full\">\n              <h2 className=\"text-xl font-bold mb-4\">Cancel Order</h2>\n              <p className=\"mb-4\">Are you sure you want to cancel this order?</p>\n              \n              <textarea\n                value={cancelReason}\n                onChange={(e) => setCancelReason(e.target.value)}\n                placeholder=\"Optional: Reason for cancellation\"\n                className=\"w-full p-2 border rounded mb-4\"\n                rows=\"3\"\n              />\n              \n              <div className=\"flex justify-end space-x-2\">\n                <button\n                  onClick={() => setShowCancelModal(false)}\n                  className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded\"\n                >\n                  No, Keep Order\n                </button>\n                <button\n                  onClick={handleCancelOrder}\n                  disabled={cancellingOrder === selectedOrder.id}\n                  className=\"px-4 py-2 bg-red-600 text-white rounded disabled:opacity-50\"\n                >\n                  {cancellingOrder === selectedOrder.id ? 'Cancelling...' : 'Yes, Cancel Order'}\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Orders;"],"names":["formatInrPrice","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","Orders","user","useAuth","orders","setOrders","useState","loading","setLoading","cancellingOrder","setCancellingOrder","showCancelModal","setShowCancelModal","selectedOrder","setSelectedOrder","cancelReason","setCancelReason","expandedOrderId","setExpandedOrderId","pagination","setPagination","currentPage","itemsPerPage","totalItems","filters","setFilters","status","dateRange","from","to","sorting","setSorting","field","direction","useEffect","fetchOrders","async","start","end","query","supabase","select","count","eq","id","order","ascending","gte","lte","data","ordersData","error","range","ordersWithSerialNo","map","index","_objectSpread","serialNo","prev","console","toast","formatDate","dateString","Date","toLocaleDateString","year","month","day","hour","minute","_jsxs","className","children","_jsx","Navbar","htmlFor","value","onChange","e","parseInt","target","option","type","length","onClick","toggleOrderExpand","orderId","slice","concat","pending","processing","completed","cancelled","created_at","total_amount","fill","stroke","viewBox","xmlns","strokeLinecap","strokeLinejoin","strokeWidth","d","openCancelModal","disabled","order_items","item","src","products","image_url","alt","name","quantity","price","shipping_address","city","pincode","mobile","cancel_reason","cancelled_at","Math","min","ceil","placeholder","rows","orderDetails","orderFetchError","single","includes","stockRestorePromises","rpc","product_id","quantity_to_add","Promise","all","updateError","update","toISOString","success"],"sourceRoot":""}