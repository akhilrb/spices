{"version":3,"file":"static/js/517.92e729a0.chunk.js","mappings":"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","sources":["components/admin/AdminLayout.jsx","pages/admin/SalesDashboard.jsx"],"sourcesContent":["import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst AdminLayout = ({ children }) => {\n  const location = useLocation();\n\n  const navItems = [\n    {\n      path: '/admin',\n      name: 'Dashboard',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" />\n        </svg>\n      )\n    },\n    {\n      path: '/admin/orders',\n      name: 'Orders',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z\" />\n        </svg>\n      )\n    },\n    {\n      path: '/admin/products',\n      name: 'Products',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\n        </svg>\n      )\n    },\n    {\n      path: '/admin/users',\n      name: 'Users',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z\" />\n        </svg>\n      )\n    },\n    {\n      path: '/admin/sales-dashboard',\n      name: 'Sales Dashboard',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 11V7a4 4 0 118 0v4m-1 4h-6m6 0a2 2 0 11-4 0m4 0a2 2 0 11-4 0m-4 0H5m6 0a2 2 0 11-4 0m4 0a2 2 0 11-4 0\" />\n        </svg>\n      )\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 flex\">\n      {/* Sidebar */}\n      <div className=\"w-64 bg-white shadow-lg\">\n        <div className=\"h-16 bg-green-700 flex items-center px-6\">\n          <span className=\"text-white text-lg font-semibold\">Admin Panel</span>\n        </div>\n        <nav className=\"mt-6\">\n          {navItems.map((item) => (\n            <Link\n              key={item.path}\n              to={item.path}\n              className={`flex items-center px-6 py-3 text-gray-700 hover:bg-gray-100 ${\n                location.pathname === item.path ? 'bg-gray-100 border-r-4 border-green-700' : ''\n              }`}\n            >\n              {item.icon}\n              <span className=\"mx-3\">{item.name}</span>\n            </Link>\n          ))}\n          <Link\n            to=\"/\"\n            className=\"flex items-center px-6 py-3 text-gray-700 hover:bg-gray-100 mt-4\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\n            </svg>\n            <span className=\"mx-3\">Back to Site</span>\n          </Link>\n        </nav>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1\">\n        {/* Top Navigation */}\n        <div className=\"bg-white shadow-sm h-16 flex items-center px-8\">\n          <div className=\"flex-1\"></div>\n          <div className=\"flex items-center space-x-4\">\n            <span className=\"text-gray-700\">Admin</span>\n          </div>\n        </div>\n\n        {/* Page Content */}\n        <div className=\"p-8\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminLayout; ","import React, { useState, useEffect } from 'react';\nimport { supabase } from '../../config/supabase';\nimport { CSVLink } from 'react-csv';\nimport { jsPDF } from 'jspdf';\nimport 'jspdf-autotable';\nimport * as XLSX from 'xlsx';\nimport AdminLayout from '../../components/admin/AdminLayout';\n\nconst SalesDashboard = () => {\n  const [salesData, setSalesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchSalesData();\n  }, []);\n\n  const fetchSalesData = async () => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('orders')\n        .select('*')\n        .eq('status', 'Delivered');\n\n      if (error) throw error;\n      setSalesData(data);\n    } catch (error) {\n      console.error('Error fetching sales data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const calculateTotalSales = () => {\n    return salesData.reduce((total, sale) => total + sale.amount, 0);\n  };\n\n  const calculateTotalOrders = () => {\n    return salesData.length;\n  };\n\n  const bestSellingProducts = () => {\n    const productSales = {};\n    salesData.forEach(sale => {\n      if (!productSales[sale.product_id]) {\n        productSales[sale.product_id] = 0;\n      }\n      productSales[sale.product_id] += sale.amount;\n    });\n    const sortedProducts = Object.entries(productSales).sort((a, b) => b[1] - a[1]);\n    return sortedProducts.slice(0, 5);\n  };\n\n  const exportToExcel = () => {\n    const worksheet = XLSX.utils.json_to_sheet(salesData);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Sales Report\");\n    XLSX.writeFile(workbook, \"sales_report.xlsx\");\n  };\n\n  const exportToPDF = () => {\n    const doc = new jsPDF();\n    doc.text(\"Sales Report\", 20, 10);\n    doc.autoTable({\n      head: [['ID', 'Product ID', 'Amount', 'Date']],\n      body: salesData.map(sale => [sale.id, sale.product_id, sale.amount, sale.date]),\n    });\n    doc.save(\"sales_report.pdf\");\n  };\n\n  return (\n    <AdminLayout>\n      <div className=\"min-h-screen bg-gray-100 p-6\">\n        <h1 className=\"text-3xl font-bold mb-6\">Sales Dashboard</h1>\n        {loading ? (\n          <div>Loading...</div>\n        ) : (\n          <div>\n            <div className=\"mb-4\">\n              <h2 className=\"text-xl font-semibold\">Total Sales: ₹{calculateTotalSales()}</h2>\n              <h2 className=\"text-xl font-semibold\">Total Orders: {calculateTotalOrders()}</h2>\n            </div>\n            <div className=\"mb-4\">\n              <h2 className=\"text-xl font-semibold\">Best Selling Products</h2>\n              <ul>\n                {bestSellingProducts().map((product, index) => (\n                  <li key={index}>Product ID: {product[0]}, Sales: ₹{product[1]}</li>\n                ))}\n              </ul>\n            </div>\n            <table className=\"min-w-full bg-white\">\n              <thead>\n                <tr>\n                  <th className=\"py-2\">ID</th>\n                  <th className=\"py-2\">Product ID</th>\n                  <th className=\"py-2\">Amount</th>\n                  <th className=\"py-2\">Date</th>\n                </tr>\n              </thead>\n              <tbody>\n                {salesData.map((sale, index) => (\n                  <tr key={index} className=\"text-center\">\n                    <td className=\"py-2\">{sale.id}</td>\n                    <td className=\"py-2\">{sale.product_id}</td>\n                    <td className=\"py-2\">₹{sale.amount}</td>\n                    <td className=\"py-2\">{new Date(sale.date).toLocaleDateString()}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <div className=\"mt-4\">\n              <CSVLink data={salesData} filename={\"sales_report.csv\"} className=\"bg-green-600 text-white py-2 px-4 rounded mr-2\">\n                Export as CSV\n              </CSVLink>\n              <button onClick={exportToExcel} className=\"bg-blue-600 text-white py-2 px-4 rounded mr-2\">\n                Export as Excel\n              </button>\n              <button onClick={exportToPDF} className=\"bg-red-600 text-white py-2 px-4 rounded\">\n                Export as PDF\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </AdminLayout>\n  );\n};\n\nexport default SalesDashboard;\n"],"names":["_ref","children","location","useLocation","navItems","path","name","icon","_jsx","className","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","_jsxs","map","item","Link","to","concat","pathname","SalesDashboard","salesData","setSalesData","useState","loading","setLoading","useEffect","fetchSalesData","async","data","error","supabase","from","select","eq","console","AdminLayout","reduce","total","sale","amount","length","bestSellingProducts","productSales","forEach","product_id","Object","entries","sort","a","b","slice","product","index","id","Date","date","toLocaleDateString","CSVLink","filename","onClick","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","exportToPDF","doc","jsPDF","text","autoTable","head","body","save"],"sourceRoot":""}