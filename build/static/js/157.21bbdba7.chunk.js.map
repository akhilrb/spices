{"version":3,"file":"static/js/157.21bbdba7.chunk.js","mappings":"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","sources":["components/admin/AdminLayout.jsx","utils/formatDate.js","pages/admin/Users.jsx"],"sourcesContent":["import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst AdminLayout = ({ children }) => {\n  const location = useLocation();\n\n  const navItems = [\n    {\n      path: '/admin',\n      name: 'Dashboard',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" />\n        </svg>\n      )\n    },\n    {\n      path: '/admin/orders',\n      name: 'Orders',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z\" />\n        </svg>\n      )\n    },\n    {\n      path: '/admin/products',\n      name: 'Products',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\n        </svg>\n      )\n    },\n    {\n      path: '/admin/users',\n      name: 'Users',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z\" />\n        </svg>\n      )\n    },\n    {\n      path: '/admin/sales-dashboard',\n      name: 'Sales Dashboard',\n      icon: (\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 11V7a4 4 0 118 0v4m-1 4h-6m6 0a2 2 0 11-4 0m4 0a2 2 0 11-4 0m-4 0H5m6 0a2 2 0 11-4 0m4 0a2 2 0 11-4 0\" />\n        </svg>\n      )\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 flex\">\n      {/* Sidebar */}\n      <div className=\"w-64 bg-white shadow-lg\">\n        <div className=\"h-16 bg-green-700 flex items-center px-6\">\n          <span className=\"text-white text-lg font-semibold\">Admin Panel</span>\n        </div>\n        <nav className=\"mt-6\">\n          {navItems.map((item) => (\n            <Link\n              key={item.path}\n              to={item.path}\n              className={`flex items-center px-6 py-3 text-gray-700 hover:bg-gray-100 ${\n                location.pathname === item.path ? 'bg-gray-100 border-r-4 border-green-700' : ''\n              }`}\n            >\n              {item.icon}\n              <span className=\"mx-3\">{item.name}</span>\n            </Link>\n          ))}\n          <Link\n            to=\"/\"\n            className=\"flex items-center px-6 py-3 text-gray-700 hover:bg-gray-100 mt-4\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\n            </svg>\n            <span className=\"mx-3\">Back to Site</span>\n          </Link>\n        </nav>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1\">\n        {/* Top Navigation */}\n        <div className=\"bg-white shadow-sm h-16 flex items-center px-8\">\n          <div className=\"flex-1\"></div>\n          <div className=\"flex items-center space-x-4\">\n            <span className=\"text-gray-700\">Admin</span>\n          </div>\n        </div>\n\n        {/* Page Content */}\n        <div className=\"p-8\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminLayout; ","export const formatDate = (dateString) => {\n  if (!dateString) return 'N/A';\n  \n  const date = new Date(dateString);\n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\n","import React, { useState, useEffect } from 'react';\nimport { supabase, supabaseAdmin } from '../../config/supabase';\nimport { formatDate } from '../../utils/formatDate';\nimport toast from 'react-hot-toast';\nimport AdminLayout from '../../components/admin/AdminLayout';\n\nconst AdminUsers = () => {\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [search, setSearch] = useState('');\n  const [viewType, setViewType] = useState('list');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(10);\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  const fetchUsers = async () => {\n    try {\n      setLoading(true);\n      \n      // Fetch the current user to check admin status\n      const { data: { user: currentUser }, error: userError } = await supabase.auth.getUser();\n      \n      if (userError) {\n        console.error('Error getting current user:', userError);\n        throw userError;\n      }\n      \n      // Log current user details for debugging\n      console.log('Current User:', currentUser);\n      console.log('Current User Metadata:', currentUser?.user_metadata);\n      \n      // Check if the current user is an admin\n      if (!currentUser) {\n        console.error('No current user found');\n        throw new Error('No user logged in');\n      }\n      \n      // Check for is_admin flag\n      const isAdmin = currentUser.user_metadata?.is_admin;\n      console.log('Is Admin:', isAdmin);\n      \n      if (!isAdmin) {\n        console.error('Unauthorized access: User is not an admin');\n        throw new Error('Unauthorized access: User is not an admin');\n      }\n\n      // Fetch users from Supabase auth using admin client\n      const { data, error } = await supabaseAdmin.auth.admin.listUsers();\n\n      if (error) {\n        console.error('Error listing users:', error);\n        throw error;\n      }\n      \n      // Transform user data \n      const transformedUsers = data.users.map(user => ({\n        id: user.id,\n        email: user.email,\n        name: user.user_metadata?.name || 'N/A',\n        created_at: user.created_at\n      }));\n\n      setUsers(transformedUsers);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      toast.error(`Failed to load users: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteUser = async (userId) => {\n    if (!window.confirm('Are you sure you want to delete this user?')) return;\n\n    try {\n      // Note: This might require additional backend logic for full user deletion\n      const { error } = await supabase\n        .from('users')\n        .delete()\n        .eq('id', userId);\n\n      if (error) throw error;\n\n      setUsers(users.filter(user => user.id !== userId));\n      toast.success('User deleted successfully');\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      toast.error('Failed to delete user');\n    }\n  };\n\n  const filteredUsers = users.filter(user => \n    user.email !== 'akil.ai.dev@gmail.com' && (\n      user.email.toLowerCase().includes(search.toLowerCase()) ||\n      (user.name && user.name.toLowerCase().includes(search.toLowerCase()))\n    )\n  );\n\n  const totalPages = Math.ceil(filteredUsers.length / itemsPerPage);\n\n  const getCurrentUsers = () => {\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    return filteredUsers.slice(startIndex, startIndex + itemsPerPage);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-100 p-6\">\n        <div className=\"flex justify-center items-center h-full\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-green-700\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <AdminLayout>\n      <div className=\"min-h-screen bg-gray-100\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">User Management</h1>\n              <p className=\"mt-1 text-sm text-gray-500\">\n                Manage and monitor user accounts\n              </p>\n            </div>\n          </div>\n\n          {/* View Type Toggle */}\n          <div className=\"mb-4\">\n            <button\n              onClick={() => setViewType('list')}\n              className={`mr-2 px-4 py-2 rounded ${viewType === 'list' ? 'bg-green-600 text-white' : 'bg-gray-200'}`}\n            >\n              List View\n            </button>\n          </div>\n\n          {/* Items Per Page Selection */}\n          <div className=\"mb-4\">\n            <label className=\"mr-2\">Items per page:</label>\n            <select\n              value={itemsPerPage}\n              onChange={(e) => {\n                setItemsPerPage(Number(e.target.value));\n                setCurrentPage(1);\n              }}\n              className=\"border border-gray-300 rounded-md\"\n            >\n              <option value={5}>5</option>\n              <option value={10}>10</option>\n              <option value={20}>20</option>\n              <option value={50}>50</option>\n            </select>\n          </div>\n\n          {/* Search and Filters */}\n          <div className=\"bg-white rounded-lg shadow p-6 mb-8\">\n            <div className=\"max-w-lg\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Search Users\n              </label>\n              <input\n                type=\"text\"\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                placeholder=\"Search by name or email...\"\n                className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500\"\n              />\n            </div>\n          </div>\n\n          {/* Users List */}\n          <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n            <table className=\"w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Email</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Name</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Registered At</th>\n                  <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">Actions</th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {getCurrentUsers().map((user) => (\n                  <tr key={user.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm text-gray-500\">{user.email}</div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm font-medium text-gray-900\">{user.name}</div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm text-gray-500\">{formatDate(user.created_at)}</div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                      <button \n                        onClick={() => handleDeleteUser(user.id)}\n                        className=\"text-red-600 hover:text-red-900 mr-4\"\n                      >\n                        Delete\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n\n            {/* Pagination */}\n            {totalPages > 1 && (\n              <div className=\"bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6\">\n                <div className=\"flex-1 flex justify-between sm:hidden\">\n                  <button \n                    onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                    disabled={currentPage === 1}\n                    className=\"relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50\"\n                  >\n                    Previous\n                  </button>\n                  <button \n                    onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                    disabled={currentPage === totalPages}\n                    className=\"ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50\"\n                  >\n                    Next\n                  </button>\n                </div>\n                <div className=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-700\">\n                      Showing{' '}\n                      <span className=\"font-medium\">\n                        {(currentPage - 1) * itemsPerPage + 1}\n                      </span>{' '}\n                      to{' '}\n                      <span className=\"font-medium\">\n                        {Math.min(currentPage * itemsPerPage, filteredUsers.length)}\n                      </span>{' '}\n                      of{' '}\n                      <span className=\"font-medium\">{filteredUsers.length}</span>{' '}\n                      users\n                    </p>\n                  </div>\n                  <div>\n                    <nav className=\"relative z-0 inline-flex rounded-md shadow-sm -space-x-px\" aria-label=\"Pagination\">\n                      <button \n                        onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                        disabled={currentPage === 1}\n                        className=\"relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50\"\n                      >\n                        <span className=\"sr-only\">Previous</span>\n                        Previous\n                      </button>\n                      {[...Array(totalPages)].map((_, index) => (\n                        <button\n                          key={index}\n                          onClick={() => setCurrentPage(index + 1)}\n                          className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${\n                            currentPage === index + 1 \n                              ? 'z-10 bg-green-50 border-green-500 text-green-600' \n                              : 'border-gray-300 text-gray-500 hover:bg-gray-50'\n                          }`}\n                        >\n                          {index + 1}\n                        </button>\n                      ))}\n                      <button \n                        onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                        disabled={currentPage === totalPages}\n                        className=\"relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50\"\n                      >\n                        <span className=\"sr-only\">Next</span>\n                        Next\n                      </button>\n                    </nav>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </AdminLayout>\n  );\n};\n\nexport default AdminUsers;\n"],"names":["_ref","children","location","useLocation","navItems","path","name","icon","_jsx","className","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","_jsxs","map","item","Link","to","concat","pathname","formatDate","dateString","Date","toLocaleDateString","year","month","day","hour","minute","AdminUsers","users","setUsers","useState","loading","setLoading","search","setSearch","viewType","setViewType","currentPage","setCurrentPage","itemsPerPage","setItemsPerPage","useEffect","fetchUsers","async","_currentUser$user_met","data","user","currentUser","error","userError","supabase","auth","getUser","console","log","user_metadata","Error","isAdmin","is_admin","supabaseAdmin","admin","listUsers","transformedUsers","_user$user_metadata","id","email","created_at","toast","message","filteredUsers","filter","toLowerCase","includes","totalPages","Math","ceil","length","AdminLayout","onClick","value","onChange","e","Number","target","type","placeholder","getCurrentUsers","startIndex","slice","window","confirm","from","delete","eq","userId","success","handleDeleteUser","max","disabled","min","Array","_","index"],"sourceRoot":""}